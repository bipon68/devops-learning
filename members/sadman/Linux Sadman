# Full DevOps Linux Web Server Setup for MERN Stack: From Scratch to Production (সম্পূর্ণ বাংলায় ব্যাখ্যা সহ)

## সূচিপত্র
1. পরিচিতি
2. সিস্টেম প্রস্তুতি
3. DevOps ইউজার তৈরি
4. SSH সেটআপ ও সুরক্ষা
5. ফায়ারওয়াল কনফিগারেশন
6. Node.js ও MongoDB ইনস্টলেশন
7. Git সেটআপ ও প্রজেক্ট ক্লোন
8. পরিবেশ পরিবর্তনশীলতা কনফিগারেশন (.env)
9. অ্যাপ লোকালভাবে চালানো ও পরীক্ষা
10. Nginx রিভার্স প্রক্সি হিসেবে সেটআপ
11. PM2 দ্বারা প্রসেস ম্যানেজমেন্ট
12. systemd সার্ভিস তৈরি (PM2 বিকল্প)
13. MERN অ্যাপ Dockerize করা
14. Docker Compose সেটআপ
15. Jenkins CI/CD পাইপলাইন
16. Prometheus + Grafana মনিটরিং
17. ব্যাকআপ কৌশল
18. উপসংহার

---

## ১. পরিচিতি
এই গাইডটি একটি সম্পূর্ণ MERN (MongoDB, Express.js, React.js, Node.js) অ্যাপ্লিকেশন লিনাক্স সার্ভারে শুরু থেকে প্রোডাকশন পর্যন্ত ডিপ্লয় করার প্রক্রিয়া শেখাবে। এতে DevOps পদ্ধতি, সিকিউরিটি, মনিটরিং, CI/CD সহ সব কিছুর কমান্ড ও ব্যাখ্যা রয়েছে।

---

## ২. সিস্টেম প্রস্তুতি
```bash
sudo apt update && sudo apt upgrade -y
```
- সিস্টেমের প্যাকেজ তালিকা আপডেট এবং পুরনো প্যাকেজগুলো সর্বশেষ সংস্করণে আপগ্রেড করে।

```bash
sudo apt install -y vim curl wget git net-tools unzip tar build-essential ufw
```
- সাধারণভাবে ব্যবহৃত সব গুরুত্বপূর্ণ টুল ইনস্টল করে।
  - `vim`: কোড এডিটর
  - `curl` এবং `wget`: ওয়েব থেকে ডেটা ডাউনলোডের জন্য
  - `git`: কোড ভার্সন কন্ট্রোল করার জন্য
  - `net-tools`: নেটওয়ার্ক কমান্ডের জন্য
  - `unzip`, `tar`: আর্কাইভ ম্যানেজমেন্টের জন্য
  - `build-essential`: কম্পাইলার টুলচেইন
  - `ufw`: ফায়ারওয়াল কনফিগারেশনের জন্য

---

## ৩. DevOps ইউজার তৈরি
```bash
sudo adduser devops
```
- নতুন ইউজার `devops` তৈরি করে।

```bash
sudo usermod -aG sudo devops
```
- `devops` ইউজারকে sudo (অ্যাডমিন) গ্রুপে যুক্ত করে।

```bash
su - devops
```
- নতুন ইউজারে স্যুইচ করে।

---

## ৪. SSH সেটআপ ও সুরক্ষা
```bash
ssh-keygen
```
- SSH কী পেয়ার তৈরি করে।

```bash
ssh-copy-id devops@your_server_ip
```
- পাবলিক কী সার্ভারে পাঠানো হয় যাতে পাসওয়ার্ড ছাড়াই লগইন করা যায়।

```bash
sudo vim /etc/ssh/sshd_config
```
- SSH কনফিগারেশন ফাইল খুলে নিম্নলিখিত দুটি লাইন আপডেট করুন:
  - `PermitRootLogin no`: রুট ইউজার SSH থেকে নিষিদ্ধ
  - `PasswordAuthentication no`: শুধুমাত্র কী-এর মাধ্যমে লগইন

```bash
sudo systemctl restart ssh
```
- SSH সার্ভিস রিস্টার্ট করে নতুন কনফিগারেশন কার্যকর করে।

---

## ৫. ফায়ারওয়াল কনফিগারেশন
```bash
sudo apt install ufw -y
```
- ফায়ারওয়াল টুল UFW ইনস্টল করে।

```bash
sudo ufw allow OpenSSH
sudo ufw allow http
sudo ufw allow https
```
- SSH, HTTP ও HTTPS পোর্ট খুলে দেয়।

```bash
sudo ufw enable
sudo ufw status
```
- ফায়ারওয়াল চালু করে এবং স্ট্যাটাস দেখে।

---

## ৬. Node.js এবং MongoDB ইনস্টলেশন
```bash
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs
```
- Node.js ভার্সন 18 ইনস্টল করে।

```bash
sudo npm install -g pm2
```
- PM2 গ্লোবালি ইনস্টল করে, এটি Node.js অ্যাপ চালানোর জন্য ব্যবহার করা হয়।

```bash
wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | \
  sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
sudo apt update
sudo apt install -y mongodb-org
```
- MongoDB 6.0 এর সোর্স যুক্ত করে এবং MongoDB ইনস্টল করে।

```bash
sudo systemctl start mongod
sudo systemctl enable mongod
```
- MongoDB সার্ভিস চালু এবং সিস্টেম বুটে চালু রাখার জন্য সেট করে।

---

## ৭. Git সেটআপ ও প্রজেক্ট ক্লোন
```bash
sudo apt install git -y
git clone https://github.com/your-username/mern-app.git
cd mern-app
```
- গিট ইনস্টল করে এবং আপনার MERN প্রজেক্ট ক্লোন করে লোকাল মেশিনে নিয়ে আসে।

---

## ৮. পরিবেশ পরিবর্তনশীলতা কনফিগারেশন (.env)
```bash
cp .env.example .env
vim .env
```
- `.env` ফাইল তৈরি করে এবং সেখানে DB URI, JWT_SECRET, PORT ইত্যাদি কনফিগার করা হয়।

---

## ৯. অ্যাপ লোকালভাবে চালানো ও পরীক্ষা
```bash
cd backend
npm install
npm run dev
```
- ব্যাকএন্ড ডিপেন্ডেন্সি ইন্সটল করে এবং সার্ভার চালু করে।

```bash
cd ../frontend
npm install
npm run build
```
- React অ্যাপ ইন্সটল করে এবং প্রোডাকশন বিল্ড তৈরি করে।

---

## ১০. Nginx রিভার্স প্রক্সি হিসেবে সেটআপ
```bash
sudo apt install nginx -y
sudo vim /etc/nginx/sites-available/mern
```
- Nginx ইনস্টল করে এবং কনফিগারেশন ফাইল তৈরি করে।

**কনফিগারেশন ব্লক ব্যাখ্যা সহ**
```nginx
server {
    listen 80;
    server_name your_domain_or_ip;

    location /api/ {
        proxy_pass http://localhost:5000/; # ব্যাকএন্ড API ট্রাফিক ফরওয়ার্ড করে
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location / {
        root /home/devops/mern-app/frontend/build; # ফ্রন্টএন্ড বিল্ড ফোল্ডার
        index index.html;
        try_files $uri /index.html;
    }
}
```

```bash
sudo ln -s /etc/nginx/sites-available/mern /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx
```
- সিমলিংক করে, কনফিগ টেস্ট করে এবং Nginx রিস্টার্ট করে।

---

## ১১. PM2 দ্বারা প্রসেস ম্যানেজমেন্ট
```bash
cd backend
```
- `cd backend`: ব্যাকএন্ড ফোল্ডারে প্রবেশ করুন।

```bash
npm install
```
- `npm install`: সব প্রয়োজনীয় Node.js প্যাকেজ ইনস্টল করে `package.json` থেকে।

```bash
npm run build
```
- (যদি applicable হয়) অ্যাপ বিল্ড করে—React নয়, Express.js হলে এটি দরকার নেই।

```bash
pm2 start server.js --name backend
```
- `pm2` দিয়ে `server.js` ফাইল চালু করা হয় এবং `backend` নামে একটি প্রসেস হিসেবে চালানো হয়।

```bash
pm2 startup
```
- সার্ভার রিবুটের পর স্বয়ংক্রিয়ভাবে অ্যাপ চালু করার জন্য PM2 ইনিশিয়ালাইজ করে।

```bash
pm2 save
```
- বর্তমানে চালু করা অ্যাপগুলো সংরক্ষণ করে, যেন রিবুটের পর স্বয়ংক্রিয়ভাবে স্টার্ট হয়।

---

## ১২. systemd সার্ভিস তৈরি (PM2-এর বিকল্প)
```bash
sudo vim /etc/systemd/system/mern-backend.service
```
- নতুন সার্ভিস কনফিগারেশনের জন্য systemd ফাইল তৈরি করা হয়।

```ini
[Unit]
Description=MERN Backend Service
After=network.target

[Service]
User=devops
WorkingDirectory=/home/devops/mern-app/backend
ExecStart=/usr/bin/node server.js
Restart=always

[Install]
WantedBy=multi-user.target
```
- এই সার্ভিসটি:
  - `network.target` এর পরে চালু হবে
  - `devops` ইউজার হিসেবে চলবে
  - `/home/devops/mern-app/backend` ডিরেক্টরিতে `server.js` চালাবে
  - সার্ভিস ক্র্যাশ করলে আবার চালু হবে

```bash
sudo systemctl daemon-reload
```
- systemd কে নতুন সার্ভিস ফাইল সম্পর্কে অবহিত করে।

```bash
sudo systemctl enable mern-backend
```
- সার্ভিসটি সিস্টেম বুটের সময় স্বয়ংক্রিয়ভাবে চালু হবে।

```bash
sudo systemctl start mern-backend
```
- সার্ভিসটি এখনই চালু করে।

---

## ১৩. MERN অ্যাপ Dockerize করা
**backend/Dockerfile**
```Dockerfile
FROM node:18
WORKDIR /app
COPY . .
RUN npm install
EXPOSE 5000
CMD ["node", "server.js"]
```
- একটি ব্যাকএন্ড ডকার ইমেজ তৈরি করে যা `server.js` চালায়।

**frontend/Dockerfile**
```Dockerfile
FROM node:18 AS build
WORKDIR /app
COPY . .
RUN npm install && npm run build

FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
```
- প্রথমে React অ্যাপ বিল্ড করে, তারপর `nginx` দিয়ে সার্ভ করে।

---

## ১৪. Docker Compose সেটআপ
**docker-compose.yml**
```yaml
version: '3'
services:
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - DB_URI=your_db_url
    depends_on:
      - mongo

  frontend:
    build: ./frontend
    ports:
      - "80:80"

  mongo:
    image: mongo
    ports:
      - "27017:27017"
```
- এই ফাইলে backend, frontend ও mongo তিনটি সার্ভিস ডিফাইন করা হয়।

```bash
docker compose up -d
```
- সব কনটেইনার ব্যাকগ্রাউন্ডে চালু করে।

---

## ১৫. Jenkins CI/CD পাইপলাইন
```bash
sudo apt install openjdk-17-jdk -y
```
- Jenkins চালানোর জন্য Java ইনস্টল করে।

```bash
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
echo "deb https://pkg.jenkins.io/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list
```
- Jenkins-এর রেপোজিটরি যুক্ত করে।

```bash
sudo apt update
sudo apt install jenkins -y
```
- Jenkins ইনস্টল করে।

```bash
sudo systemctl start jenkins
sudo systemctl enable jenkins
```
- সার্ভিস চালু এবং বুটে অটো স্টার্ট সেট করে।

```bash
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
```
- প্রথম লগইনের জন্য অ্যাডমিন পাসওয়ার্ড দেখায়।

---

## ১৬. Prometheus + Grafana মনিটরিং
**docker-compose.monitor.yml**
```yaml
version: '3'
services:
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
```
- Prometheus ডেটা কালেক্ট করে, Grafana তা ভিজ্যুয়াল করে।

**prometheus.yml**
```yaml
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'mern-backend'
    static_configs:
      - targets: ['localhost:5000']
```
- প্রতি ১৫ সেকেন্ডে backend সার্ভার থেকে মেট্রিক কালেক্ট করে।

```bash
docker compose -f docker-compose.monitor.yml up -d
```
- মনিটরিং সার্ভিসগুলো চালু করে।

---

## ১৭. ব্যাকআপ কৌশল
```bash
sudo crontab -e
```
- ক্রনজব এডিট করতে।

```cron
0 2 * * * tar -czvf /home/devops/mern_backup_$(date +\%F).tar.gz /home/devops/mern-app
```
- প্রতিদিন ভোর ২টায় অ্যাপ ফোল্ডারের ব্যাকআপ নেওয়া হবে।

---
# Red Hat Linux Administration Command Guide 



---

## 🔐 ১. ইউজার এবং গ্রুপ ম্যানেজমেন্ট
```bash
useradd devops
```
- নতুন ইউজার `devops` তৈরি করে।

```bash
passwd devops
```
- `devops` ইউজারের পাসওয়ার্ড সেট করে।

```bash
groupadd developers
```
- নতুন গ্রুপ `developers` তৈরি করে।

```bash
usermod -aG developers devops
```
- `devops` ইউজারকে `developers` গ্রুপে যোগ করে।

```bash
id devops
```
- ইউজারের UID, GID, গ্রুপগুলো দেখায়।

---

## 📁 ২. ফাইল পারমিশন ও মালিকানা
```bash
chmod 755 script.sh
```
- `script.sh` ফাইলের পারমিশন 755 করে: মালিকের পূর্ণ অধিকার, অন্যদের রিড ও এক্সিকিউট।

```bash
chown devops:developers script.sh
```
- ফাইলের মালিক `devops` এবং গ্রুপ `developers` হিসেবে সেট করে।

```bash
ls -l
```
- ফাইলের পারমিশন, মালিকানা ও সাইজসহ তথ্য দেখায়।

---

## 📦 ৩. প্যাকেজ ম্যানেজমেন্ট (DNF/YUM)
```bash
dnf install httpd -y
```
- Apache HTTPD সার্ভার ইনস্টল করে।

```bash
dnf remove httpd -y
```
- HTTPD রিমুভ করে।

```bash
dnf update -y
```
- সকল প্যাকেজ আপডেট করে।

```bash
dnf list installed | grep nginx
```
- ইনস্টলকৃত `nginx` সম্পর্কিত প্যাকেজ দেখায়।

---

## 🧱 ৪. সার্ভিস ও প্রসেস ম্যানেজমেন্ট (systemd)
```bash
systemctl start nginx
```
- `nginx` সার্ভিস চালু করে।

```bash
systemctl enable nginx
```
- বুটের সময় স্বয়ংক্রিয়ভাবে চালু হবে।

```bash
systemctl status nginx
```
- `nginx` সার্ভিসের বর্তমান অবস্থা দেখায়।

```bash
systemctl stop nginx
```
- সার্ভিস বন্ধ করে।

---

## 🌐 ৫. নেটওয়ার্কিং
```bash
ip a
```
- সমস্ত নেটওয়ার্ক ইন্টারফেসের IP ঠিকানা দেখায়।

```bash
nmcli device status
```
- NetworkManager এর মাধ্যমে ডিভাইস স্ট্যাটাস দেখায়।

```bash
ping google.com
```
- নেটওয়ার্ক কানেক্টিভিটি টেস্ট করে।

---

## 🔥 ৬. ফায়ারওয়াল (firewalld)
```bash
firewall-cmd --state
```
- ফায়ারওয়াল চালু আছে কিনা দেখায়।

```bash
firewall-cmd --add-service=http --permanent
firewall-cmd --reload
```
- HTTP সার্ভিস অনুমোদন করে এবং ফায়ারওয়াল পুনরায় লোড করে।

---

## 📁 ৭. ডিস্ক, পার্টিশন এবং ফাইলসিস্টেম
```bash
lsblk
```
- সংযুক্ত স্টোরেজ ডিভাইস দেখায়।

```bash
fdisk /dev/sdb
```
- `sdb` ডিভাইসে নতুন পার্টিশন তৈরি করে।

```bash
mkfs.ext4 /dev/sdb1
```
- নতুন পার্টিশনে EXT4 ফাইল সিস্টেম তৈরি করে।

```bash
mount /dev/sdb1 /mnt/data
```
- ডিভাইস `/mnt/data` তে মাউন্ট করে।

```bash
echo '/dev/sdb1 /mnt/data ext4 defaults 0 0' >> /etc/fstab
```
- রিবুটের পর অটো-মাউন্টের জন্য fstab এ এন্ট্রি যোগ করে।

---

## 🔁 ৮. শিডিউলিং: CronJobs
```bash
crontab -e
```
- বর্তমান ইউজারের জন্য cron কাজ নির্ধারণ করে।

```cron
0 2 * * * /home/devops/backup.sh
```
- প্রতিদিন ভোর ২টায় `backup.sh` স্ক্রিপ্ট চালায়।

```bash
systemctl status crond
```
- `crond` সার্ভিস চালু আছে কিনা দেখে।

---

## 🛡️ ৯. SELinux
```bash
getenforce
```
- SELinux enforced, permissive বা disabled আছে কিনা জানায়।

```bash
setenforce 0
```
- SELinux `Permissive` মোডে নিয়ে আসে (অস্থায়ী)।

```bash
vim /etc/selinux/config
```
- পার্মানেন্ট কনফিগারেশনের জন্য SELinux ফাইল এডিট করে।

---

## 📤 ১০. SSH এবং SCP
```bash
ssh user@server
```
- রিমোট সার্ভারে SSH সংযোগ করে।

```bash
scp file.txt user@192.168.1.10:/tmp/
```
- লোকাল ফাইল রিমোট সার্ভারে কপি করে।

```bash
ssh-keygen
ssh-copy-id user@server
```
- পাসওয়ার্ডবিহীন লগইন সেটআপের জন্য SSH key তৈরি ও কপি করা হয়।

---

## 📋 ১১. লগ ও মনিটরিং
```bash
tail -f /var/log/messages
```
- রিয়েলটাইমে সিস্টেম লগ দেখা।

```bash
journalctl -xe
```
- systemd ভিত্তিক লগ দেখার জন্য।

```bash
journalctl -u sshd
```
- নির্দিষ্ট সার্ভিসের লগ দেখা।

---

## 📜 ১২. Bash Shell Script
```bash
#!/bin/bash
echo "Hello Red Hat Admin!"
```
- একটি সাধারণ শেল স্ক্রিপ্ট যা Hello মেসেজ দেখায়।

```bash
chmod +x hello.sh
./hello.sh
```
- স্ক্রিপ্ট এক্সিকিউটেবল করে এবং চালায়।

# Red Hat Linux Administration Command Guide (বাংলায় সম্পূর্ণ ব্যাখ্যা সহ)

এই গাইডটি Red Hat System Administration (RHCSA / RHCE) এবং DevOps প্রস্তুতির জন্য সকল গুরুত্বপূর্ণ লিনাক্স কমান্ড ব্যাখ্যা সহ উপস্থাপন করেছে। এতে ইউজার ম্যানেজমেন্ট, ফাইল পারমিশন, সিস্টেম সেটআপ, ফায়ারওয়াল, cron, SELinux, systemctl, disk management, scripting এবং আরো অনেক বিষয় কভার করা হয়েছে।

---

[আগের সকল বিভাগ অপরিবর্তিত থাকবে]

---

## 🧪 ১৩. প্রসেস ও RAM ব্যবস্থাপনা
```bash
top
```
- রিয়েলটাইমে CPU ও মেমরি ব্যবহার দেখায়।

```bash
ps aux
```
- সমস্ত চলমান প্রসেস তালিকা দেখায়।

```bash
kill -9 PID
```
- নির্দিষ্ট PID সম্বলিত প্রসেস জোরপূর্বক বন্ধ করে।

```bash
free -h
```
- RAM এবং Swap ব্যবহার প্রদর্শন করে।

```bash
df -h
```
- ডিস্কের মোট ও ব্যবহৃত সাইজ দেখায়।

```bash
du -sh /home/devops
```
- নির্দিষ্ট ডিরেক্টরির স্পেস ইউসেজ দেখায়।

---

## 🧮 ১৪. গ্রাব ও বুট প্রসেস
```bash
grub2-mkconfig -o /boot/grub2/grub.cfg
```
- নতুন গ্রাব কনফিগারেশন তৈরি করে।

```bash
systemctl get-default
```
- বর্তমান টার্গেট (রান লেভেল) দেখায়।

```bash
systemctl set-default multi-user.target
```
- CLI ভিত্তিক রানলেভেল ডিফল্ট হিসেবে সেট করে।

---

## 📎 ১৫. নেটওয়ার্ক কনফিগারেশন (static IP)
```bash
nmcli connection show
```
- সক্রিয় কানেকশন তালিকা দেখায়।

```bash
nmcli connection modify ens33 ipv4.addresses 192.168.1.100/24
nmcli connection modify ens33 ipv4.gateway 192.168.1.1
nmcli connection modify ens33 ipv4.dns 8.8.8.8
nmcli connection modify ens33 ipv4.method manual
nmcli connection up ens33
```
- `ens33` ইন্টারফেসে স্ট্যাটিক আইপি অ্যাসাইন করে ও কানেকশন রিস্টার্ট করে।

---

## 🧾 ১৬. আর্কাইভ ও কমপ্রেশন
```bash
tar -cvf backup.tar /home/devops
```
- `backup.tar` নামের টার ফাইল তৈরি করে।

```bash
tar -xvf backup.tar
```
- টার ফাইল extract করে।

```bash
gzip backup.tar
```
- gzip কমপ্রেশন করে।

```bash
gunzip backup.tar.gz
```
- gzip ফাইল extract করে।

---









