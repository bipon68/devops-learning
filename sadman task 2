## *Step 1: Clone Your Repository*

bash
# SSH into your EC2 instance
ssh -i "your-key.pem" ubuntu@<Your-EC2-Public-IP>

# Install Git (if not installed)
sudo apt-get update
sudo apt-get install git

# Clone your GitHub repository
git clone https://github.com/sadman-tanim/devops-deploy-task.git
cd devops-deploy-task


---

### *Step 2: Install Docker on EC2 Instance*

bash
# Update and install Docker
sudo apt update
sudo apt install docker.io

# Start Docker and enable it on boot
sudo systemctl start docker
sudo systemctl enable docker

# Verify Docker installation
sudo docker --version
sudo docker run hello-world


---

### *Step 3: Dockerize Your Application*

1. *Create a Dockerfile in your project directory* (devops-deploy-task):

Dockerfile
# Use official Nginx image as a base
FROM nginx:alpine

# Copy your application files into the container's Nginx HTML directory
COPY . /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Run Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]


2. *Build the Docker Image:*

bash
# From the project directory, build the Docker image
sudo docker build -t devops-app .


3. *Run the Docker Container:*

bash
# Run the Docker container
sudo docker run -d -p 80:80 devops-app


4. *Verify the application:*

- Visit http://<Your-EC2-Public-IP> in your browser to check if the application is running inside the Docker container.

---

### *Step 4: Set Up Kubernetes (EKS) on AWS*

#### *Install AWS CLI and kubectl Locally*

bash
# Install AWS CLI
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

# Configure AWS CLI
aws configure

# Install kubectl (Kubernetes CLI)
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl


#### *Create an EKS Cluster*

bash
# Create an EKS cluster using AWS Console (this is a manual step in the AWS Console)
# Once the cluster is created, configure kubectl to use the cluster
aws eks --region <your-region> update-kubeconfig --name <your-cluster-name>

# Verify connection to the Kubernetes cluster
kubectl get nodes


---

### *Step 5: Deploy Dockerized Application to Kubernetes (EKS)*

1. *Create a deployment.yaml file* for Kubernetes deployment:

yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-app-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devops-app
  template:
    metadata:
      labels:
        app: devops-app
    spec:
      containers:
      - name: devops-app
        image: devops-app
        ports:
        - containerPort: 80


2. *Apply the deployment to Kubernetes:*

bash
# Apply the deployment.yaml file to the EKS cluster
kubectl apply -f deployment.yaml


3. *Expose the Deployment via LoadBalancer:*

bash
# Expose the application via a LoadBalancer
kubectl expose deployment devops-app-deployment --type=LoadBalancer --name=devops-app-service

# Check the external IP for the service
kubectl get svc


4. *Access the application:*
   - Visit http://<external-ip> to access the application.

---

### *Step 6: Automate Infrastructure with Terraform*

1. *Install Terraform:*

bash
# Install Terraform
curl -LO https://releases.hashicorp.com/terraform/latest_version/terraform_0.14.7_linux_amd64.zip
unzip terraform_0.14.7_linux_amd64.zip
sudo mv terraform /usr/local/bin/


2. *Create a main.tf file* for provisioning an EKS cluster with Terraform:

hcl
provider "aws" {
  region = "us-west-2"
}

resource "aws_eks_cluster" "example" {
  name     = "example-cluster"
  role_arn = "arn:aws:iam::123456789012:role/eksServiceRole"

  vpc_config {
    subnet_ids = ["subnet-12345", "subnet-67890"]
  }
}

resource "aws_eks_node_group" "example" {
  cluster_name = aws_eks_cluster.example.name
  node_role_arn = "arn:aws:iam::123456789012:role/eksNodeRole"
  subnet_ids   = ["subnet-12345", "subnet-67890"]
  scaling_config {
    desired_size = 2
    max_size     = 3
    min_size     = 1
  }
}


3. *Initialize and Apply Terraform Configuration:*

bash
# Initialize Terraform
terraform init

# Apply the Terraform configuration to create the resources
terraform apply


4. *Set up kubectl for the new cluster:*

bash
# Once the cluster is created, update kubeconfig
aws eks --region us-west-2 update-kubeconfig --name example-cluster


---

### *Step 7: Scaling and Monitoring with AWS Tools*

#### *Set Up Auto Scaling*

bash
# Horizontal Pod Autoscaler (HPA) for EKS
kubectl autoscale deployment devops-app-deployment --cpu-percent=50 --min=1 --max=5


#### *Enable CloudWatch for Monitoring*

bash
# Install and start CloudWatch Logs agent
sudo apt-get install awslogs
sudo service awslogs start


#### *Create CloudWatch Alarms (via Console)*
- Set up CloudWatch alarms for metrics like *CPU usage, **memory usage*, etc., from the AWS console.

---

### *Step 8: Set Up CloudFront (Optional)*

1. *Create a CloudFront Distribution:*
   - Go to *CloudFront* → *Create Distribution*.
   - Set the *origin* to the *LoadBalancer URL* or the public IP of your EC2.

---

### *Step 9: Clean Up Resources*

1. *Stop or Terminate EC2 Instance:*
   bash
   # Stop or Terminate the EC2 instance
   aws ec2 terminate-instances --instance-ids <instance-id>
   

2. *Delete Kubernetes Resources:*

bash
# Delete Kubernetes Deployment and Service
kubectl delete deployment devops-app-deployment
kubectl delete svc devops-app-service


3. *Destroy Terraform Resources:*

bash
# Destroy all resources created by Terraform
terraform destroy


---

### *Step 10: Set Up Route 53 for Domain Management*

1. *Create a Hosted Zone in Route 53:*
   - Go to *Route 53* → *Create Hosted Zone* and set up your domain.

2. *Set DNS Records (A or CNAME) to point to the Load Balancer:*
   bash
   aws route53 change-resource-record-sets --hosted-zone-id <zone-id> --change-batch file://records.json
   

Example records.json:

json
{
  "Changes": [{
    "Action": "UPSERT",
    "ResourceRecordSet": {
      "Name": "yourdomain.com",
      "Type": "A",
      "AliasTarget": {
        "DNSName": "<ELB-DNS-Name>",
        "EvaluateTargetHealth": false,
        "HostedZoneId": "Z3DZXE0EIN2L7G"
      }
    }
  }]
}


---

### *Step 11: Going Live and Final Checks*

1. *Use AWS WAF for security protection.*
2. *Set up SSL using AWS ACM* for HTTPS.

1. *Fix the Jenkins Repository Error*
   - The error related to Jenkins is due to an unavailable repository. If you're not planning to install Jenkins, you can ignore this warning. However, if Jenkins is part of your requirements, you may want to update or fix the repository by running the following:
   
   bash
   sudo apt-get update --allow-unauthenticated
   sudo apt-get install -y jenkins
   

2. *Reload Docker Configuration*
   - The warning related to Docker indicates that the docker.service configuration file changed. You should reload Docker's service manager configuration to ensure everything is up-to-date:
   
   bash
   sudo systemctl daemon-reload
   sudo systemctl restart docker
   

3. *Verify Docker Installation*
   - Test if Docker is running correctly by running the hello-world image again:

   bash
   sudo docker run hello-world
   

   This should show that Docker is installed correctly and can pull images from Docker Hub.

---

### *Next Steps After Fixing Docker*

1. *Dockerize Your Application* (if not already done)
   - Make sure you have your Dockerfile in your project directory. If you haven't created it, you can follow the example provided in previous steps:

   *Example Dockerfile:*
   Dockerfile
   FROM nginx:alpine
   COPY . /usr/share/nginx/html
   EXPOSE 80
   CMD ["nginx", "-g", "daemon off;"]
   

2. *Build and Run Your Docker Image:*

   bash
   sudo docker build -t devops-app .
   sudo docker run -d -p 80:80 devops-app
   

   Access the application by visiting http://<Your-EC2-Public-IP>.

---

### *Proceed to Kubernetes (EKS) Setup*

1. *Set Up Kubernetes (EKS)*:
   - Create the *EKS Cluster* as explained in previous steps, using Terraform or directly through AWS Console.

2. *Deploy Your Application to EKS*:
   - Use the kubectl commands to apply the Kubernetes deployment and expose the service. If you have any issues with Kubernetes setup, let me know!

1. *Dockerize Your Application* (if not already done)
   - Make sure you have your Dockerfile in your project directory. If you haven't created it, you can follow the example provided in previous steps:

   *Example Dockerfile:*
   Dockerfile
   FROM nginx:alpine
   COPY . /usr/share/nginx/html
   EXPOSE 80
   CMD ["nginx", "-g", "daemon off;"]
   

2. *Build and Run Your Docker Image:*

   bash
   sudo docker build -t devops-app .
   sudo docker run -d -p 80:80 devops-app
   

   Access the application by visiting http://<Your-EC2-Public-IP>.

---

### *Proceed to Kubernetes (EKS) Setup*

1. *Set Up Kubernetes (EKS)*:
   - Create the *EKS Cluster* as explained in previous steps, using Terraform or directly through AWS Console.

2. *Deploy Your Application to EKS*:
   - Use the kubectl commands to apply the Kubernetes deployment and expose the service. If you have any issues with Kubernetes setup, let me know!

---

Let me know if you encounter any specific issues at any of these steps, or if you need additional help configuring your AWS environment!
It seems like you're facing an issue related to the Jenkins repository and trying to install Jenkins. The error you're seeing is because the Jenkins repository does not have the proper release file for your Ubuntu version, and it's likely that the repository source you're using is no longer valid or has changed.

### *How to Resolve the Jenkins Issue:*

If Jenkins is *not a requirement for your project* and you're just working with Docker/Kubernetes, you can *ignore* the Jenkins-related error and proceed with the Docker setup.

However, if *Jenkins* is a necessary part of your project, here’s how you can fix this issue:

### *Fixing Jenkins Repository Issue*

1. *Remove the old Jenkins repository:*
   bash
   sudo rm /etc/apt/sources.list.d/jenkins.list
   

2. *Add the correct Jenkins repository:*
   bash
   sudo wget -q -O - https://pkg.jenkins.io/jenkins.io.key | sudo apt-key add -
   sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable/ / > /etc/apt/sources.list.d/jenkins.list'
   

3. *Update the package list:*
   bash
   sudo apt-get update
   

4. *Install Jenkins:*
   bash
   sudo apt-get install jenkins
   

If Jenkins is not necessary for your setup, just *ignore this step* and proceed with your Docker and Kubernetes setup.

### *Proceeding with Docker and Kubernetes Setup*

Since you're likely focused on *Docker and Kubernetes*, you can continue with the steps mentioned previously. Here are your next steps after fixing the Jenkins issue or ignoring it:

1. *Ensure Docker is running correctly* with:
   bash
   sudo docker run hello-world
   

2. *Deploy your application in Docker*, as we covered earlier.

Let me know if you want further assistance with Docker, Kubernetes, or any additional steps!
It looks like you've successfully logged into your Vagrant VM, and now you're ready to start practicing DevOps commands.

To help you with the next steps, here’s an overview of some common DevOps-related commands you can practice:

### 1. *Docker Commands:*
   Docker is widely used for creating, deploying, and running applications in containers.
   - *Check Docker Version:*
     bash
     docker --version
     
   - *Pull a Docker Image:*
     bash
     docker pull ubuntu
     
   - *List Docker Containers:*
     bash
     docker ps -a
     
   - *Run a Docker Container:*
     bash
     docker run -d -p 80:80 ubuntu
     

### 2. *Kubernetes Commands (kubectl):*
   Kubernetes is used for automating application deployment, scaling, and management.
   - *Check kubectl Version:*
     bash
     kubectl version --client
     
   - *Create a Kubernetes Deployment:*
     bash
     kubectl create deployment nginx --image=nginx
     
   - *Get Pods:*
     bash
     kubectl get pods
     
   - *Scale Deployment:*
     bash
     kubectl scale deployment nginx --replicas=3
     

### 3. *AWS CLI Commands:*
   AWS CLI is used to interact with AWS services directly from your terminal.
   - *Check AWS CLI Version:*
     bash
     aws --version
     
   - *Configure AWS CLI:*
     bash
     aws configure
     
   - *List S3 Buckets:*
     bash
     aws s3 ls
     
   - *Create an EC2 Instance:*
     bash
     aws ec2 run-instances --image-id ami-xxxxxxxx --count 1 --instance-type t2.micro --key-name my-key-pair
     

### 4. *Vagrant Commands:*
   Vagrant is used for creating and managing virtualized development environments.
   - *Start Virtual Machine:*
     bash
     vagrant up
     
   - *SSH into the Virtual Machine:*
     bash
     vagrant ssh
     
   - *Destroy the Virtual Machine:*
     bash
     vagrant destroy
     

### 5. *CI/CD Commands (Jenkins, GitLab, etc.):*
   Continuous Integration and Continuous Delivery are essential DevOps practices.
   - *Start Jenkins Service (Ubuntu):*
     bash
     sudo service jenkins start
     
   - *Install GitLab:*
     bash
     sudo apt-get install gitlab-ce
     
   - *Push Code to Git Repository:*
     bash
     git push origin main
     

### 6. *Helm Commands:*
   Helm is used for Kubernetes package management.
   - *Install Helm:*
     bash
     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
     
   - *Install a Helm Chart:*
     bash
     helm install my-nginx bitnami/nginx
     

### 7. *System Monitoring Commands:*
   - *Check System Usage:*
     bash
     top
     
   - *Check Disk Usage:*
     bash
     df -h
     
   - *Monitor Network Connections:*
     bash
     netstat -tuln
     

### 8. *Log Management:*
   Logs are crucial for monitoring and troubleshooting.
   - *View System Logs:*
     bash
     sudo journalctl -xe
     
   - *Check Specific Log File:*
     bash
     tail -f /var/log/syslog
     

--- The key issues are:
1. *Failed to connect to esm.ubuntu.com (Port 443 connection refused):*
   This usually happens if there’s a problem with the repository or network configuration, or if it's a timeout issue.

2. *TLS handshake failure for Docker's repository:*
   This is related to SSL/TLS handshake failure, which could be caused by incorrect or outdated certificates, or network issues.

### Possible Solutions:

#### 1. *Change the Ubuntu Mirror:*
   Sometimes, changing the mirror from which you download packages can solve connection issues. 

   - Edit the APT sources list:
     bash
     sudo nano /etc/apt/sources.list
     

   - Replace the existing URLs with a more reliable mirror, for example, archive.ubuntu.com. Update the list with:
     plaintext
     deb http://archive.ubuntu.com/ubuntu/ trusty main restricted universe multiverse
     deb http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe multiverse
     

   - Save the file and exit (Ctrl + X, then Y to confirm changes).
   - Run:
     bash
     sudo apt-get update
     

#### 2. *Use Docker’s Official Repository (Again):*
   If Docker’s package is causing issues, make sure you are using the correct repository:
   
   - Follow these steps to add the Docker repository manually:
   
   *Add Docker’s GPG key:*
   bash
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   

   *Add the Docker repository:*
   bash
   sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   

   *Update the package list:*
   bash
   sudo apt-get update
   

   *Install Docker:*
   bash
   sudo apt-get install docker-ce
   

#### 3. *Try Using HTTP for Docker (If HTTPS Fails):*
   Sometimes, network issues (e.g., proxy configurations, firewall issues) block https:// traffic. You can try switching to HTTP:

   - In the /etc/apt/sources.list.d/docker.list or relevant Docker repo file, replace https:// with http://.

#### 4. *Check Your Internet Connection:*
   Make sure your VM has proper internet access, especially for external downloads.

#### 5. *Check for Proxy Issues:*
   If you're behind a corporate firewall or proxy, you might need to configure your system to use the proxy. You can check proxy settings in the terminal with:
   bash
   echo $http_proxy
   

---### Step 1: Update the APT Source List

1. Open the /etc/apt/sources.list file to configure the repository sources:
   bash
   sudo nano /etc/apt/sources.list
   

2. *Update the repository list* to use official Ubuntu mirrors and Docker’s official repository.

Replace the content of /etc/apt/sources.list with:

bash
# Ubuntu repositories
deb http://archive.ubuntu.com/ubuntu trusty main restricted
deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted
deb http://archive.ubuntu.com/ubuntu trusty universe
deb http://archive.ubuntu.com/ubuntu trusty-updates universe
deb http://archive.ubuntu.com/ubuntu trusty multiverse
deb http://archive.ubuntu.com/ubuntu trusty-updates multiverse

# Docker repository
deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable


- *Save the changes* by pressing CTRL + X, then Y, and Enter.

---

### Step 2: Install Prerequisites

Before installing Docker, we need to install some dependencies.

Run the following commands:

bash
sudo apt-get update

# Install required packages for Docker installation
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common


---

### Step 3: Add Docker's Official GPG Key

Add Docker’s official GPG key to your system so it can verify packages from Docker’s repository:

bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -


---

### Step 4: Install Docker

Now you can install Docker by running:

bash
sudo apt-get update
sudo apt-get install docker-ce


- docker-ce stands for Docker Community Edition, which is the version most commonly used in development and production.

---

### Step 5: Start and Enable Docker

To start Docker and make sure it starts on system boot, run the following commands:

bash
sudo systemctl start docker
sudo systemctl enable docker


- The start command starts the Docker service.
- The enable command ensures that Docker starts automatically at system boot.

---

### Step 6: Verify Docker Installation

Check that Docker is installed and running properly by verifying its version and checking its status:

bash
docker --version
sudo systemctl status docker


- The docker --version command will display the installed version of Docker.
- The systemctl status docker command will show the current status of Docker (whether it's running or inactive).

---

### Step 7: Running Docker Without sudo (Optional)

By default, Docker requires sudo to run, but you can allow your user to run Docker commands without using sudo:

bash
sudo usermod -aG docker $USER


After running this command, *log out and log back in* for the changes to take effect.

---

### Step 8: Run Docker Test

To verify everything is working, run a test Docker container:

bash
docker run hello-world


This command will download a test image from Docker Hub and run it. If Docker is properly installed, it will print a message saying "Hello from Docker!"

---

### Summary of Configuration

1. *Repository Configuration* (/etc/apt/sources.list):
   bash
   deb http://archive.ubuntu.com/ubuntu trusty main restricted
   deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted
   deb http://archive.ubuntu.com/ubuntu trusty universe
   deb http://archive.ubuntu.com/ubuntu trusty-updates universe
   deb http://archive.ubuntu.com/ubuntu trusty multiverse
   deb http://archive.ubuntu.com/ubuntu trusty-updates multiverse
   deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable
   

2. *Required Packages*:
   bash
   sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
   

3. *Add Docker GPG Key*:
   bash
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
   

4. *Install Docker*:
   bash
   sudo apt-get update
   sudo apt-get install docker-ce
   

5. *Start Docker*:
   bash
   sudo systemctl start docker
   sudo systemctl enable docker
   

6. *Check Docker Installation*:
   bash
   docker --version
   sudo systemctl status docker
   

7. *Optional - Run Docker Without sudo*:
   bash
   sudo usermod -aG docker $USER
   

8. *Run Test Container*:
   bash
   docker run hello-world
   
1. *Update System Repositories*  
Try updating the repositories by running:

bash
sudo apt-get update --fix-missing


This will attempt to fix any missing repositories or packages that might be causing the issue.

2. *Disable Insecure Repositories*  
It looks like there are some insecure repository sources (esm.ubuntu.com) causing issues. You might want to disable or replace them with stable and reliable sources. Here's how you can disable problematic sources in /etc/apt/sources.list:

- Open the sources.list file again:
    bash
    sudo nano /etc/apt/sources.list
    …
Here is the *full configuration* for installing Docker on Ubuntu from scratch, including all necessary steps and configuration to make sure everything is set up properly:

### 1. *Update /etc/apt/sources.list File*
First, we need to ensure that the sources for Docker and Ubuntu repositories are properly configured.

To open and edit the sources file:

bash
sudo nano /etc/apt/sources.list


Then, replace the content or append the following configuration:

bash
# Official Ubuntu repositories
deb http://archive.ubuntu.com/ubuntu trusty main restricted
deb http://archive.ubuntu.com/ubuntu trusty universe
deb http://archive.ubuntu.com/ubuntu trusty multiverse
deb http://archive.ubuntu.com/ubuntu trusty-updates main restricted
deb http://archive.ubuntu.com/ubuntu trusty-updates universe
deb http://archive.ubuntu.com/ubuntu trusty-updates multiverse

# Docker official repository
deb [arch=amd64] https://download.docker.com/linux/ubuntu trusty stable


### 2. *Save and Exit the File*
After adding the configuration:

- Press Ctrl + O to save the file.
- Press Enter to confirm the file name.
- Press Ctrl + X to exit the editor.

### 3. *Update Package List*
Now, you need to update the local package index to reflect the changes you made to the sources list:

bash
sudo apt-get update


### 4. *Install Required Packages*
You may need to install a few necessary utilities like apt-transport-https, curl, and software-properties-common to allow the installation of Docker:

bash
sudo apt-get install apt-transport-https ca-certificates curl software-properties-common


### 5. *Add Docker’s Official GPG Key*
Next, add Docker’s official GPG key to ensure that the Docker packages are properly verified:

bash
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -


### 6. *Verify the GPG Key*
You can verify that the key was added successfully with the following command:

bash
sudo apt-key fingerprint 0EBFCD88


You should see Docker’s public key fingerprint listed.

### 7. *Install Docker*
Now, you can install Docker CE (Community Edition) using the following command:

bash
sudo apt-get install docker-ce


This will install Docker and its dependencies.

### 8. *Start Docker Service*
After installation, start the Docker service:

bash
sudo systemctl start docker


### 9. *Enable Docker to Start on Boot*
Ensure Docker starts automatically when the system boots up:

bash
sudo systemctl enable docker


### 10. *Verify Docker Installation*
You can check if Docker is installed and running correctly with the following command:

bash
sudo docker --version


Additionally, to test Docker, run the hello-world image:

bash
sudo docker run hello-world


This command should display a confirmation message from Docker.

### 11. *(Optional) Add Your User to the Docker Group*
If you don't want to prefix Docker commands with sudo, add your user to the Docker group:

bash
sudo usermod -aG docker $USE
1. *Open the sources file*:
   bash
   sudo nano /etc/apt/sources.list
   

2. *Add the configuration*:
   Add the above configuration into the sources.list file (it will replace or be added to your current configuration).

3. *Save and exit*:
   - To save, press Ctrl + O, then press Enter.
   - To exit, press Ctrl + X.

4. *Update the package list*:
   Run the following command to update the package list with the new repositories:

   bash
   sudo apt-get update
   

5. *Install Docker*:
   Now, you should be able to install Docker using the following command:

   bash
   sudo apt-get install docker-c
